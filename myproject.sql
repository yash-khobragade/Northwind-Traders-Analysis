create database if not exists northwind;

-- List all orders along with the corresponding customer name and city.
select  o.orderid , c.customerid , c.companyname , c.city
from orders o join customers c on o.customerID  = c.customerID;

-- Calculate the total quantity ordered for each product.
SELECT 
    p.productID, 
    p.productName, 
    SUM(od.quantity) AS total_quantity
FROM 
    order_details od
JOIN 
    products p 
ON 
    od.productID = p.productID
GROUP BY 
    p.productID, 
    p.productName
ORDER BY 
    p.productID ASC;
    
-- Percentage of Total Revenue by Product
SELECT 
    p.productID, 
    p.productName, 
--     SUM(od.quantity * od.unitPrice * (1-od.discount)) AS product_revenue,
   round((SUM(od.quantity * od.unitPrice * (1-od.discount)) / (select SUM(od2.quantity * od2.unitPrice * (1-od2.discount)) from order_details od2 ))* 100 , 2) as Percentage_total_revenue
FROM 
    products p 
JOIN 
	order_details od
ON 
    p.productID =od.productID
GROUP BY 
    p.productID , p.productName
ORDER BY 
    percentage_total_revenue desc;
    
-- Find the top 5 customers with the highest total spending on orders.
select c.customerID ,c.companyname ,  sum(od.quantity * od.unitPrice * (1-od.discount)) as total_spending
from order_details od 
join orders o on od.orderid = o.orderID
join customers c on o.customerID = c.customerID
group by customerID
order by total_spending desc
limit 5;


-- Update the discount of orders for discontinued products to zero.
update order_details
set discount  = 0
where productid in 
	(select productid
    from products
    where discontinued = 1);
    
    
-- Calculate the average freight cost for each shipper and show only those with above-average costs.
select shipperid , round(avg(freight),2) as avg_freight
from orders
group by shipperid
having avg_freight > (select avg(freight) from orders)
order by shipperid;

-- Find the monthly sales revenue generated by each employee.
select year(o.orderdate) year_ , month(o.orderdate) month_ , o.employeeID , sum(od.quantity * od.unitPrice * (1 - od.discount)) as monthly_sales
from orders o join order_details od on o.orderid = od.orderid
group by year_ , month_ , employeeID
order by year_ , month_ , employeeID;
 
 -- Identify which shipping company handles the most orders where the total order value exceeds $500.
 with above_500_orders as 
	(select od.orderid  , sum(od.quantity * od.unitPrice * (1 - od.discount)) as total_order_value
	from order_details od 
	group by od.orderID
	having total_order_value > 500)
select o.shipperid , count(*) as high_value_order
from above_500_orders a5o join orders o on a5o.orderid = o.orderid
group by o.shipperID
order by high_value_order desc;

-- Identify which employee has the highest sales (in terms of revenue) in each product category.
with cat_emp_sales as(
	select cat.categoryID , e.employeeID , sum(od.quantity * od.unitPrice * (1 - od.discount)) emp_cat_sales
    from categories cat 
    join products p on cat.categoryID = p.categoryID
    join order_details od on od.productID = p.productID
    join orders o on o.orderID = od.orderID
    join employees e on e.employeeID = o.employeeID
    group by cat.categoryID , e.employeeID
    order by cat.categoryID , e.employeeID)
select ces.categoryid , ces.employeeid 
from cat_emp_sales ces join 
	(select ces2.categoryid , max(emp_cat_sales) as max_sales
    from cat_emp_sales ces2
    group by ces2.categoryid ) as cat_max_sales
    on  ces.categoryid = cat_max_sales.categoryid and ces.emp_cat_sales = cat_max_sales.max_sales;
    
    
    
    
    